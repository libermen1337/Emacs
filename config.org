* Basic settings -
  - type C-h k to see the functions information
** theme -
*** Doom emacs theme 
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t)
    (load-theme 'doom-acario-dark t)

    ;;treemacs config
    (setq doom-themes-treemacs-theme "doom-acario-dark")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))
#+END_SRC
** elcord -
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'elcord)
  (package-refresh-contents)
  (package-install 'elcord))
(elcord-mode)
#+END_SRC
** General settings -
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  ;;font -
  (set-frame-font "JetBrains Mono" nil t)
  ;;startup screen -
  (setq inhibit-startup-screen t)
  ;;alias -
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;;keybinding for ansi terminal -
  (global-set-key (kbd "<s-return>") 'ansi-term) 

  ;;no politics -
  (setq scroll-conservatively 100)

  ;; remove the bell -
  (setq ring-bell-function 'ignore)

  ;;find your cursor only for GUI -
  (when  window-system (global-hl-line-mode t))

  ;;prettify symbols for GUI only -
  ( when window-system(global-prettify-symbols-mode t)) 

  ;;remove the backup files -
  (setq make-backup-files nil)
  (setq auto-save-default nil)


  ;;org <s snippets -
  (when (version<="9.2" (org-version))
    (require 'org-tempo))
#+END_SRC

** Terminal -
*** Setting bash as default shell -
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
#+END_SRC
*** Keybinding for ansi terminal -
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
** subword 
   - really useful for camelcase 
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** show lines and columns in modeline -
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** clock 
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)

#+END_SRC
* Use Package -
** Which key -
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init(which-key-mode))
#+END_SRC
** Beacon -
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode t))
#+END_SRC

** Avy
- very useful package for going to different lines very fast 
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind("M-s" . avy-goto-char))
#+END_SRC

** switch-window
  - switch windows in a much smarter way 
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
      ([remap other-window] . switch-window))
#+END_SRC
** hungry-delete -
   - delete all the unwanted space between two variables 
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+END_SRC
** Dmenu
  - dmenu package for emacs
  - this package does not work Gnome since Gnome intercepts the package :(
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC

** symon
   - symon is a very simple performance monitor 
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode)
    )
#+END_SRC
** Pop up menu
  - popup menu for the kill ring
  - very useful incase you "yank" the wrong char/variable/variable !
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind("M-y" . popup-kill-ring ))
#+END_SRC
* Org -
** org mode snippets 
   - <el followed by a <TAB> will generate emacs-lisp snippet 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Org Bullets -
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Ido mode -
** Enable Ido mode 
#+BEGIN_SRC emacs-lisp
  ;;better switching 
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido mode vertical -
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init(ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)

#+END_SRC
** Smex -
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init(smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
 
* Custom functions - 
** visit the config file with single keyboard binding 
#+BEGIN_SRC emacs-lisp
  ;; config visit custom function 
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  ;;binding it to a key -
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** visit the init with a single keyboard binding
#+BEGIN_SRC emacs-lisp
  ;;init visit
  (defun init-visit ()
    (interactive)
    (find-file "~/.emacs.d/init.el"))

  ;;keybinding
  (global-set-key (kbd "C-c i") 'init-visit)

#+END_SRC
** reloading the file -
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  ;;keybinding -
  (global-set-key (kbd "C-c r") 'config-reload)

#+END_SRC
** split window automaticaly -
*** split horizontally 
#+BEGIN_SRC emacs-lisp
  (defun split-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  ;;keybinding -
  (global-set-key (kbd "C-x 2") 'split-horizontally)
#+END_SRC
*** split window vertically
#+BEGIN_SRC emacs-lisp
    (defun split-vertically ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))

    ;;keybinding -
    (global-set-key (kbd "C-x 3") 'split-vertically)
#+END_SRC
** copy whole line -
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))

  ;;keybinding -
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
** kill whole word -
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))

  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
* Web dev - 
** rainbow 
   - set the color depending on the hexcode 
   - really good package if your a web dev 
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
	:init
	(dolist (hook '(css-mode-hook html-mode-hook sass-mode-hook))
	(add-hook hook 'rainbow-mode)))
#+END_SRC     

** rainbow delimiters 
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC

* Auto Completion 
** electric
   - autocompletion for almost every single bracket
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})))

  (electric-pair-mode t)
#+END_SRC
** company
   - auto completion framework
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))

#+END_SRC
* Buffer
** kill the current buffer 
   - asking for which buffer to kill is stupid
   - I know which buffer I want to kill
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer()
    (interactive)
    (kill-buffer (current-buffer)))
  ;;keybinding

  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
** kill all buffers 
   - kill all the buffers in emacs that are present
   - reccomend a hard keybinding for this one so you accedentally don't loose your data
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list))
    )

  ;;keybinding -
  (global-set-key (kbd "C-M-k") 'kill-all-buffers)
#+END_SRC
* Dashboard 
  - setting up a good looking dashboard for emacs
  - 
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Lal Salam"))
#+END_SRC
* Modeline
** spaceline 
   - Well Uncle Dave likes it so oh well
   - also reccomend doom modeline 
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)) 
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'company-mode)
    (diminish 'subword-mode))
#+END_SRC
